import os
import re
import fileinput

class MarkdownDirectoryBuilder(object):
    """ M<<<<<<<<<<<<<<<<<<<<<<<<<<
    Class: MarkdownDirectoryBuilder
    For a given folder, builds a set of files corresponding to the code files with all 
    extracted Markdown concatenated.
    Creates a markdown index file for this folder.
    >>>>>>>>>>>>>>>>>>>>>>>>>>M """
    def __init__(self, container):
        self.container = container
        exemptions = self.container.get("Exemptions")
        self.exempt_files = exemptions.get()

    def build(self, dir_name, delete_only):
        """ M<<<<<<<<<<<<<<<<<<<<<<<<<<
        Gather a list of code files in the given directory.
        Delete any markdown files associated with them. If delete_only is true, stop here.
        Extract markdown from the code files (unless they're already markdown).
        Build an index linking to all markdown files. Return the index.
        Do this recursively adding the index of sub-directories to the parent directory's index.
        
        @param string dir_name
        @param bool delete_only
        
        @return string - filename of the markdown index for this directory
        >>>>>>>>>>>>>>>>>>>>>>>>>>M """
        # Recurse into sub-directories first building md for the lowest leaves first
        # This is as we don't want to include indexes of sub-directories with no markdown
        sub_directories = self._gather_sub_directories(dir_name)
        all_non_exempt_sub_directories = self._exclude_exempt_folders(sub_directories)
        sub_directory_indexes = []
        for sub_directory in all_non_exempt_sub_directories:
            sub_directory_index = self.build(sub_directory, delete_only)
            if sub_directory_index is not None:
                sub_directory_indexes.append(sub_directory_index)

        # Gather all non-exempt files in this folder, deleting any previously auto-generated md
        all_files = self._gather_all_files(dir_name)
        all_non_exempt_files = self._exclude_exempt_files(all_files)
        all_handmade_files = self._delete_auto_generated_md_files(dir_name, all_non_exempt_files)
        (handmade_markdown_files, code_files) = self._sort_files(all_handmade_files)

        if delete_only:
            # Don't generate md or indexes
            return None
        
        # Generate md for this folder        
        auto_gen_markdown_files = self._generate_markdown_files(dir_name, code_files)
        
        # Generate an index for this folder
        markdown_index = self.container.get("MarkdownIndex", [self.container])
        index_file = markdown_index.build(dir_name, handmade_markdown_files, auto_gen_markdown_files, sub_directory_indexes)
        
        return index_file

    def _gather_all_files(self, dir_name):
        dirpath, _, all_files = list(os.walk(dir_name))[0]
        return all_files
    
    def _exclude_exempt_files(self, all_files):
        all_non_exempt_files = []
        for file in all_files:
            if (file not in self.exempt_files) and self._file_has_allowed_extension(file):
                all_non_exempt_files.append(file)
        return all_non_exempt_files
    
    def _exclude_exempt_folders(self, all_folders):
        all_non_exempt_folders = []
        for folder_path in all_folders:
            file_parts = os.path.split(folder_path)
            folder = file_parts[1]
            if folder not in self.exempt_files:
                all_non_exempt_folders.append(folder_path)
        return all_non_exempt_folders

    def _file_has_allowed_extension(self, file):
        file_parts = os.path.splitext(file)
        prohibited_extensions = ['.pyc']
        return file_parts[1] not in prohibited_extensions
        
    def _delete_auto_generated_md_files(self, dir_name, all_files):
        all_handmade_files = []
        for file in all_files:
            full_file_name = "%s/%s" % (dir_name, file)
            if self._is_auto_generated(full_file_name):
                os.remove(full_file_name)
            else:
                all_handmade_files.append(file)
        
        return all_handmade_files
                
    def _is_auto_generated(self, filename):
        """
        Checks the second line of the file to see if it says that it's automatically generated.
        """
        line_num = 1
        is_auto_generated = False
        for line in fileinput.input(filename):
            if line_num == 2:
                patn = re.compile('<sup><i>This file is automatically generated.</i></sup>')
                is_auto_generated = (patn.match(line) != None)
                break
            line_num += 1
    
        fileinput.close()
        return is_auto_generated
        
    def _sort_files(self, files):
        """
        Sort given files into those with a markdown extension and those without
        """
        markdown_files = []
        code_files = []
        for file in files:
            file_parts = os.path.splitext(file)
            if file_parts[1] == '.md':
                markdown_files.append(file)
            else:
                code_files.append(file)
                
        return (markdown_files, code_files)

    def _generate_markdown_files(self, dir_name, code_files):
        """
        For each of the given code_files, generate a markdown file and append it to an array of same. Return this array.
        """
        markdown_files = []
        markdown_file_builder = self.container.get("MarkdownFileBuilder", [self.container])
        for code_file in code_files:
            markdown_file = markdown_file_builder.build(dir_name, code_file)
            if markdown_file is not None:
                markdown_files.append(markdown_file)
            
        return markdown_files
    
    def _gather_sub_directories(self, dir_name):
        sub_dirs = []
        for name in os.listdir(dir_name):
            full_path = os.path.join(dir_name, name)
            if os.path.isdir(full_path):
                sub_dirs.append(full_path)
        
        return sub_dirs
    