import os
from doc_builder.markdown_extractor import MarkdownExtractor

class MarkdownFileBuilder(object):
    """ M<<<<<<<<<<<<<<<<<<<<<<<<<
    # Class: MarkdownFileBuilder
    For a given programme file containing MarkAcross, builds a file with all extracted Markdown concatenated.
    >>>>>>>>>>>>>>>>>>>>>>>>>M """
    def __init__(self, container):
        self.container = container

    def build(self, dirname, filename):
        """ M<<<<<<<<<<<<<<<<<<<<<<<<<
        ### Method: build
        Gather all markdown for the specified file & write it to a markdown file in the same directory.
        
        @param string dirname
        @param string filename
        
        @return string - markdown filename
        >>>>>>>>>>>>>>>>>>>>>>>>>M """
        full_filename = "%s/%s" % (dirname, filename)
        
        markdown_extractor = self.container.get("MarkdownExtractor", [self.container])
        markdown_paragraphs = markdown_extractor.extract(full_filename)
        
        if len(markdown_paragraphs) == 0:
            # No markdown found in the given file
            return None
        
        markdown = self._get_doc_title(filename)        
        
        for markdown_paragraph in markdown_paragraphs:
            markdown += markdown_paragraph + "\n"
            
        markdown_filename = self._generate_markdown_filename(full_filename)
        self._write_markdown_file(markdown, markdown_filename)
        return markdown_filename
        
    def _get_doc_title(self, filename):
        """
        Create a title for the top of the markdown file
        """
        return "## %s\n<sup><i>This file is automatically generated.</i></sup>\n" % filename
    
    def _generate_markdown_filename(self, full_filename):
        """
        Create the markdown filename which is the same as the code filename but with a ".md" extension
        """
        file_parts = os.path.splitext(full_filename)
        markdown_filename = "%s.md" % file_parts[0]
        return markdown_filename
    
    def _write_markdown_file(self, markdown, markdown_filename):
        """
        Write the given markdown to the given markdown_filename
        """
        fp = open(markdown_filename, 'w')
        fp.write(markdown)
        fp.close()
        
        
        