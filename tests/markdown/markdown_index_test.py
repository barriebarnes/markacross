import os
import unittest
from tests.test_framework.fixture import Fixture
from doc_builder.markdown_index import MarkdownIndex
from tests.test_framework.mock_container import MockContainer
import pprint

class MarkdownIndexTest(unittest.TestCase):
    """
    Test the markdown index generator class
    """

    def setUp(self):
        self.container = MockContainer().get()

    def test_extract(self):
        # Set up expected results:
        expected_results = """## Index for: index_test
_This file is automatically generated._

The following provides information on the code in this folder:  
* [Title 1](handmade_markdown_1.md)
* [Title 2](handmade_markdown_2.md)

The following provides information on specific code files in this folder:  
* [Documentation for some_file.](autogen_markdown_1.md)

The following provides information on the code in sub-folders of this folder:  
* [List of contents for folder: subdir](subdir/subdir_index.md)

"""
        
        # Set up fixtures
        fixture = Fixture()
        handmade_markdown_files = [fixture.get_fixture_path("index_test/handmade_markdown_1.md"), fixture.get_fixture_path("index_test/handmade_markdown_2.md")]
        auto_gen_markdown_files = [fixture.get_fixture_path("index_test/autogen_markdown_1.md")]
        sub_directory_indexes = [fixture.get_fixture_path("index_test/subdir/subdir_index.md")]

        # Determine the markdown test folder path
        markdown_folder_path = os.path.dirname(handmade_markdown_files[0])
        
        # Generate markdown index file
        markdown_index = MarkdownIndex(self.container)
        markdown_index_file = markdown_index.build(markdown_folder_path, handmade_markdown_files, auto_gen_markdown_files,  sub_directory_indexes)
        
        # Read markdown index file and delete it
        fp = open(markdown_index_file, 'r')
        markdown_index = fp.read()
        fp.close()
        os.remove(markdown_index_file)
        
        # Check the file
        self.assertEqual(expected_results, markdown_index)
