import os
import unittest
from tests.test_framework.fixture import Fixture
from mock import MagicMock
from tests.test_framework.mock_container import MockContainer
from doc_builder.markdown_file_builder import MarkdownFileBuilder
from doc_builder.markdown_extractor import MarkdownExtractor
import pprint

class MarkdownFileBuilderTest(unittest.TestCase):
    """
    Test the markdown file builder class
    """

    def setUp(self):
        self.container = MockContainer().get()
        self.set_up_mock_container()
    
    def set_up_mock_container(self):        
        # Set up mock markdown_extractor object
        mock_markdown_paras = ["AAA\n", "BBB\n", "CCC"]
        mock_markdown_extractor = MarkdownExtractor()
        mock_markdown_extractor.extract = MagicMock(return_value=mock_markdown_paras)
        self.container.put_variable("MarkdownExtractor", mock_markdown_extractor)

    def test_build(self):
        # Build expected results
        test_file_1 = Fixture().get_fixture_path("markdown_test_1.txt")        
        expected_file_contents = """## Documentation for %s.
_This file is automatically generated._

AAA

BBB

CCC
""" % test_file_1

        # Create markdown
        markdown_file_builder = MarkdownFileBuilder(self.container)
        markdown_filename = markdown_file_builder.build(test_file_1)
        pprint.pprint(markdown_filename)
        
        # Check markdown file contents are as expected
        fp = open(markdown_filename, 'r')
        markdown_result = fp.read()
        fp.close()        
        self.assertEqual(expected_file_contents, markdown_result)
        
        os.remove(markdown_filename)
        